////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2014 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.dao.hibernate;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.denimgroup.threadfix.data.dao.VulnerabilityFilterDao;
import com.denimgroup.threadfix.data.entities.VulnerabilityFilter;

@Repository
public class HibernateVulnerabilityFilterDao implements VulnerabilityFilterDao {
	
	private SessionFactory sessionFactory;

	@Autowired
	public HibernateVulnerabilityFilterDao(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory; 
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<VulnerabilityFilter> retrieveAllGlobal() {
		return getBaseCriteria()
				.add(Restrictions.eq("global", true))
				.list();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<VulnerabilityFilter> retrieveAll(int orgId) {
		return getBaseCriteria()
				.add(Restrictions.eq("organization.id", orgId))
				.list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<VulnerabilityFilter> retrieveAll(int orgId, int appId) {
		return getBaseCriteria()
				.add(Restrictions.eq("application.id", appId))
				.list();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<VulnerabilityFilter> retrieveAllEffective(int orgId) {
		return getBaseCriteria()
				.add(Restrictions.disjunction()
						.add(Restrictions.eq("organization.id", orgId))
						.add(Restrictions.eq("global", true))
						)
				.list();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<VulnerabilityFilter> retrieveAllEffective(int orgId, int appId) {
		return getBaseCriteria()
				.add(Restrictions.disjunction()
						.add(Restrictions.eq("application.id", appId))
						.add(Restrictions.eq("organization.id", orgId))
						.add(Restrictions.eq("global", true))
						)
				.list();
	}

	@Override
	public VulnerabilityFilter retrieveById(int vulnFilterId) {
		return (VulnerabilityFilter) getBaseCriteria()
				.add(Restrictions.eq("id", vulnFilterId))
				.uniqueResult();
	}

	@Override
	public VulnerabilityFilter retrieveByVulnerabilityAndType(
			int sourceGenericVulnerabilityId, VulnerabilityFilter filter) {
		
		VulnerabilityFilter returnFilter = null;
		if (filter != null) {
			Criteria criteria = getBaseCriteria()
					.add(Restrictions.eq("sourceGenericVulnerability.id", sourceGenericVulnerabilityId));
					
			if (filter.getOrganization() != null) {
				criteria.add(Restrictions.eq("organization.id", filter.getOrganization().getId()));
			} else if (filter.getApplication() != null) {
				criteria.add(Restrictions.eq("application.id", filter.getApplication().getId()));
			} else {
				criteria.add(Restrictions.eq("global", true));
			}
					
			returnFilter = (VulnerabilityFilter) criteria.uniqueResult();
		}
		
		return returnFilter;
	}

	private Criteria getBaseCriteria() {
		return sessionFactory.getCurrentSession()
				.createCriteria(VulnerabilityFilter.class)
				.add(Restrictions.eq("active", true));
	}

	@Override
	public void saveOrUpdate(VulnerabilityFilter vulnerabilityFilter) {
		if (vulnerabilityFilter != null && vulnerabilityFilter.getId() != null) {
			sessionFactory.getCurrentSession().merge(vulnerabilityFilter);
		} else {
			sessionFactory.getCurrentSession().saveOrUpdate(vulnerabilityFilter);
		}
	}
	
	@Override
	public void delete(int filterId) {
		VulnerabilityFilter filter = retrieveById(filterId);
		if (filter != null) {
			sessionFactory.getCurrentSession().delete(filter);
		}
	}
}
